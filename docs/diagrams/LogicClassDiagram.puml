@startuml
!include style.puml
skinparam arrowThickness 1.1
skinparam arrowColor LOGIC_COLOR_T4
skinparam classBackgroundColor LOGIC_COLOR

package Logic as LogicPackage {

package "Parser Classes" as ParserClasses{
}
Class AddCommand
Class ClearCommand
Class DeleteCommand
Class EditCommand
Class EventCommand
Class ExitCommand
Class FindCommand
Class HelpCommand
Class ListCommand
Class RemindCommand
Class CommandResult
Class "{abstract}\nCommand" as Command


Class "<<interface>>\nLogic" as Logic
Class LogicManager
}

package Model {
Class HiddenModel #FFFFFF
}

package Storage {
}

Class HiddenOutside #FFFFFF
HiddenOutside ..> Logic

LogicManager .right.|> Logic
LogicManager -right->"1" ParserClasses
ParserClasses ..> AddCommand : <<create>>
ParserClasses ..> ClearCommand : <<clear>>
ParserClasses ..> DeleteCommand : <<delete>>
ParserClasses ..> EditCommand : <<update>>
ParserClasses ..> EventCommand : <<event>>
ParserClasses ..> ExitCommand : <<exit>>
ParserClasses ..> FindCommand : <<find>>
ParserClasses ..> HelpCommand : <<help>>
ParserClasses ..> ListCommand : <<list>>
ParserClasses ..> RemindCommand : <<remind>>

AddCommand -up-|> Command
ClearCommand -up-|> Command
DeleteCommand -up-|> Command
EditCommand -up-|> Command
EventCommand -up-|> Command
ExitCommand -up-|> Command
FindCommand -up-|> Command
HelpCommand -up-|> Command
ListCommand -up-|> Command
RemindCommand -up-|> Command
LogicManager .left.> Command : <<call>>

LogicManager --> Model
LogicManager --> Storage
Storage --[hidden] Model
Command .[hidden]up.> Storage
Command .right.> Model
note right of Command: XYZCommand = AddCommand, \nFindCommand, etc

Logic ..> CommandResult
LogicManager .down.> CommandResult
Command .up.> CommandResult : <<create>>
@enduml
